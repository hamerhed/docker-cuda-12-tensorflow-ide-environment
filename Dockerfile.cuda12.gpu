FROM nvidia/cuda:12.0.0-cudnn8-devel-ubuntu20.04

ARG OPENCV_VERSION=4.x
ARG DEBIAN_FRONTEND=noninteractive

ENV TZ=Europe/Warsaw
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

RUN apt-get update && apt-get upgrade -y \
    # Install build tools, build dependencies and python
    && apt-get install -y \
		python3-pip \
        build-essential \
        cmake \
        git \
        wget \
        unzip \
        yasm \
        pkg-config \
        libswscale-dev \
        libtbb2 \
        libtbb-dev \
        libjpeg-dev \
        libpng-dev \
        libtiff-dev \
        libavformat-dev \
        libpq-dev \
        libxine2-dev \
        libglew-dev \
        libtiff5-dev \
        zlib1g-dev \
        libavcodec-dev \
        libavformat-dev \
        libavutil-dev \
        libpostproc-dev \
        libswscale-dev \
        libavresample-dev \
        libeigen3-dev \
        libgtk2.0-dev \
        libgtk-3-dev \
        libboost-all-dev \
        libopenblas-dev \
        liblapack-dev \
        libvtk7-qt-dev \
        software-properties-common \
        ## Python
        python3-dev \
        python3-numpy \
        python3-tk \
        gcc-10 \
        g++-10 \
        libgstreamer1.0-dev \
        libgstreamer-plugins-base1.0-dev \
 		libgstreamer-plugins-bad1.0-dev \
 		gstreamer1.0-plugins-base \
 		gstreamer1.0-plugins-good \
 		gstreamer1.0-plugins-bad \
 		gstreamer1.0-plugins-ugly \
 		gstreamer1.0-libav \
 		gstreamer1.0-tools \
 		gstreamer1.0-x \
 		gstreamer1.0-alsa \
 		gstreamer1.0-gl \
 		gstreamer1.0-gtk3 \
 		gstreamer1.0-qt5 \
 		gstreamer1.0-pulseaudio \
 		libxvidcore-dev \
 		x264 \
 		libx264-dev \
 		libfaac-dev \
 		libmp3lame-dev \
 		libtheora-dev \
 		libvorbis-dev \
 		libopencore-amrnb-dev \
 		libopencore-amrwb-dev \
 		libdc1394-22 \
 		libdc1394-22-dev \
 		libv4l-dev \
 		v4l-utils \
 		libprotobuf-dev \
 		protobuf-compiler \
 		libgoogle-glog-dev \
 		libgflags-dev \
 		libgphoto2-dev \
 		libhdf5-dev \
 		doxygen \
    && rm -rf /var/lib/apt/lists/*

RUN cd /usr/include/linux && ln -s -f ../libv4l1-videodev.h videodev.h

RUN export CC=/usr/bin/gcc-10 && \
	export CXX=/usr/bin/g++-10 && \
	export CUDA_ROOT=/usr/local/cuda && \
	ln -s /usr/bin/gcc-10 $CUDA_ROOT/bin/gcc && \
	ln -s /usr/bin/g++-10 $CUDA_ROOT/bin/g++ 
	
ADD ./opencv-${OPENCV_VERSION}-24.06.2023.zip /opt/${OPENCV_VERSION}.zip
ADD ./opencv_contrib-${OPENCV_VERSION}-24.06.2023.zip /opt/${OPENCV_VERSION}_contrib.zip

RUN cd /opt/ &&\
    # Download and unzip OpenCV and opencv_contrib and delte zip files
    #wget https://github.com/opencv/opencv/archive/$OPENCV_VERSION.zip &&\
    unzip $OPENCV_VERSION.zip &&\
    rm $OPENCV_VERSION.zip &&\
    mv ${OPENCV_VERSION}_contrib.zip ${OPENCV_VERSION}.zip &&\
    #wget https://github.com/opencv/opencv_contrib/archive/$OPENCV_VERSION.zip &&\
    unzip ${OPENCV_VERSION}.zip &&\
    rm ${OPENCV_VERSION}.zip &&\
    # Create build folder and switch to it
    mkdir /opt/opencv-${OPENCV_VERSION}/build && cd /opt/opencv-${OPENCV_VERSION}/build &&\
    # Cmake configure
    cmake \
        -DOPENCV_EXTRA_MODULES_PATH=/opt/opencv_contrib-${OPENCV_VERSION}/modules \
        -DWITH_TBB=ON \
        -DWITH_CUDA=ON \
        -DWITH_CUDNN=ON \
		-DOPENCV_DNN_CUDA=ON \
		-DCUDA_ARCH_BIN=6.1 \
        -DWITH_V4L=ON \
		-DWITH_QT=OFF \
		-DWITH_OPENGL=ON \
		-DWITH_GSTREAMER=ON \
        -DCMAKE_BUILD_TYPE=RELEASE \
        -DOPENCV_ENABLE_NONFREE=ON \
        -D PYTHON_DEFAULT_EXECUTABLE=/usr/bin/python3.8 \
        -D OPENCV_PYTHON3_INSTALL_PATH=/usr/lib/python3.8/site-packages \
		-D PYTHON_EXECUTABLE=/usr/bin/python3.8 \
        # Install path will be /usr/local/lib (lib is implicit)
        -DCMAKE_INSTALL_PREFIX=/usr/local \
        .. 
    # Make
    #make -j"$(nproc)"  && \

RUN cd /opt/opencv-${OPENCV_VERSION}/build && \
	make -j"$(nproc)" VERBOSE=1 && \
    # Install to /usr/local/lib
    make install && \
    ldconfig &&\
    # Remove OpenCV sources and build folder
    rm -rf /opt/opencv-${OPENCV_VERSION} && rm -rf /opt/opencv_contrib-${OPENCV_VERSION}

RUN cp -r /usr/lib/python3.8/site-packages/cv2 /usr/local/lib/python3.8/dist-packages

# Install dlib 19.24 
RUN wget -O dlib-19.24.tar.bz2 http://dlib.net/files/dlib-19.24.tar.bz2 \
    && tar -vxjf dlib-19.24.tar.bz2

RUN cd dlib-19.24 \
    && cd examples \
    && mkdir build \
    && cd build \
    && cmake .. \
    && cmake --build . --config Release 

RUN cd /dlib-19.24 \
	pip3 install setuptools \
    && python3 setup.py install \
    && cd $WORKDIR \
    && rm /dlib-19.24.tar.bz2

#install tensorflow
RUN pip3 install tflearn imutils h5py tqdm jupyterlab urllib3 mnist keras scikit-image numba matplotlib

ADD $PWD/requirements.txt /requirements.txt
RUN pip3 install -r /requirements.txt

#install code
RUN apt-get update && wget -q https://packages.microsoft.com/keys/microsoft.asc -O- | apt-key add -\
	&& add-apt-repository "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main"
		
RUN apt-get update -y --fix-missing && apt-get install -y code

RUN pip3 install --upgrade pip
RUN pip3 install spyder==5.4.3

RUN apt-get autoclean && apt-get autoremove

RUN useradd -ms /bin/bash user -G video,sudo

USER user

#run code studio
#CMD ["/usr/share/code/code --no-sandbox"]

CMD ["/bin/bash"]